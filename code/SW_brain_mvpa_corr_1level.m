
% start SPM12 /or/ load defaults
spm('defaults','fmri');
spm_jobman('initcfg');

% runs
%--------------------------------------------------------------------------
run = {...
    'run01';...
    'run02';...
    'run03';...
    'run04';...
    };


% subjects
%--------------------------------------------------------------------------
subj = {...
    'sw01';...
    'sw02';...
    'sw03';...
    'sw04';...
    'sw05';...
    'sw06';...
    'sw07';...
    'sw08';...
    'sw09';...
    'sw10';...
    'sw11';...
    'sw12';...
    'sw13';...
    'sw14';...
    'sw15';...
    'sw16';...
    'sw17';...
    'sw18';...
    'sw19';...
    'sw20';...
    'sw21';...
    'sw22';...
    'sw23';...
    'sw24';...
    'sw25';...
    'sw26';...
    'sw27';...
    'sw28';...
    'sw29';...
    'sw30';...
    'sw31';...
    'sw32';...
    };


condition = {...
    'sw_hig';...
    'sw_low';...
    'sw_med';...
    'sw_orig';...
    'baby';...
    'scream';...
    'speech';...
    'whisper';...
    'monkey';...
    'reptile';...
    'mammal';...
    'bird';...
    'alarm';...
    'tools';...
    'vehicles';...
    'synthetic';...
    'wind';...
    'thunder';...
    'fire_crack';...
    'water';...
    'azt';...
    'brass';...
    'wood';...
    'string';...
    'noise';...
    };


% RSM matrices
%--------------------------------------------------------------------------
load(['fmri_ratings_rsm.mat'])
load(['fmri_acoustic_rsm.mat'])

macoustic = nan(23,24);
mbehavior = nan(23,24);

for c1 = 1:size(condition1,1)-2
    for c2 = c1+1:size(condition1,1)-1
        macoustic(c1,c2) = Acoustic_matrix(c1,c2);
        mbehavior(c1,c2) = Behavioral_matrix(c1,c2);
    end
end

macoustic = macoustic(:,2:end);
mbehavior = mbehavior(:,2:end);
vmacoustic = [];
vmbehavior = [];
clear midx
midx = find(~isnan(macoustic));
vmacoustic = macoustic(midx);
vmbehavior = mbehavior(midx);


% loop through mvpa
%--------------------------------------------------------------------------
for s = 1:size(subj,1)
    cd(resdir2{1,s,1})

    disp([subj{s,1}])
    count = 0;
    voxel = nan(23,24,91*109*91);

    for c1 = 1:size(condition2,1)-2
        for c2 = c1+1:size(condition2,1)-1
            count = count + 1;
            nii   = load_nii([subj{s,1},'_',condition2{c1},'_',condition2{c2},'_res_accuracy_minus_chance.nii']);
            [r,c] = find(nii.img == 0);
            voxel(c1,c2,:) = reshape(nii.img,1,91*109*91);
        end
    end
    voxel = voxel(:,2:end,:);
    vvoxel = nan(276,91*109*91);
    for v = 1:size(voxel,3)
        disp(['voxel ',num2str((91*109*91)-v)])
        temp = voxel(:,:,v);
        vvoxel(:,v) = temp(midx);
    end
    r1 = nan(1,91*109*91);
    r2 = nan(1,91*109*91);
    r3 = nan(1,91*109*91);
    r4 = nan(1,91*109*91);
    p1 = nan(1,91*109*91);
    p2 = nan(1,91*109*91);
    p3 = nan(1,91*109*91);
    p4 = nan(1,91*109*91);

    for v = 1:size(voxel,3)
        disp(['voxel ',num2str((91*109*91)-v)])
        [r1(v),p1(v)] = corr(-1*vmbehavior,vvoxel(:,v),'type','Spearman');
        [r3(v),p3(v)] = corr(1*vmbehavior,vvoxel(:,v),'type','Spearman');
    end

    nii1 = nii;
    nii2 = nii;
    nii3 = nii;
    nii4 = nii;

    for r = 1:size(r1,1)
        zr1(r) = (0.5 * (log(1+r1(r)) - log(1-r1(r)))) * 1;
        zr3(r) = (0.5 * (log(1+r3(r)) - log(1-r3(r)))) * 1;
    end

    r1(isnan(r1)) = 0;
    r3(isnan(r3)) = 0;
    nii1.img = reshape(r1*100,91,109,91);
    nii3.img = reshape(r3*100,91,109,91);
    save_nii(nii1,[subj{s,1},'_23cond_pos_pea_mvpa2rsm_behavior.nii']);
    save_nii(nii3,[subj{s,1},'_23cond_neg_pea_mvpa2rsm_behavior.nii']);

    matlabbatch = [];
    matlabbatch{1}.spm.spatial.smooth.data   = cellstr(spm_select('FPlist',pwd,['^',subj{s,1},'_23cond_.*.nii$']));
    matlabbatch{1}.spm.spatial.smooth.fwhm   = [8 8 8];
    matlabbatch{1}.spm.spatial.smooth.dtype  = 0;
    matlabbatch{1}.spm.spatial.smooth.im     = 0;
    matlabbatch{1}.spm.spatial.smooth.prefix = 's8_';
    spm_jobman('run',matlabbatch);

    ima1 = cellstr(spm_select('FPlist',pwd,['^s8_',subj{s,1},'_23cond_.*.nii$']));
    ima2 = {['mask.nii,1']};
    for i = 1:4
        matlabbatch = [];
        [pathstr, name, ext]                          = fileparts(ima1{i});
        matlabbatch{1}.spm.util.imcalc.input(1,1)     = ima1(i);
        matlabbatch{1}.spm.util.imcalc.input(2,1)     = ima2;
        matlabbatch{1}.spm.util.imcalc.output         = ['m',name,ext];
        matlabbatch{1}.spm.util.imcalc.outdir         = {''};
        matlabbatch{1}.spm.util.imcalc.expression     = 'i1.*i2';
        matlabbatch{1}.spm.util.imcalc.var            = struct('name', {}, 'value', {});
        matlabbatch{1}.spm.util.imcalc.options.dmtx   = 0;
        matlabbatch{1}.spm.util.imcalc.options.mask   = 0;
        matlabbatch{1}.spm.util.imcalc.options.interp = 1;
        matlabbatch{1}.spm.util.imcalc.options.dtype  = 4;
        spm_jobman('run',matlabbatch);
    end
end
